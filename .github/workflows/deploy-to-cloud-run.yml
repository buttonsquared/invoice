# .github/workflows/deploy-to-cloud-run.yml

name: Deploy Spring Boot to Cloud Run

on:
  push:
    branches:
      - main # Trigger on pushes to the main branch

env:
  # Google Cloud Project ID where Cloud Run service will be deployed
  GCP_PROJECT_ID: hellogrpc-296603 # IMPORTANT: Replace with your actual GCP Project ID
  # Name of the Cloud Run service
  CLOUD_RUN_SERVICE_NAME: helloworld # IMPORTANT: Replace with your desired service name
  # Google Cloud region for Cloud Run (e.g., us-central1, europe-west1)
  CLOUD_RUN_REGION: us-west1 # IMPORTANT: Replace with your desired region
  # Name for the Docker image in Artifact Registry
  IMAGE_NAME: invoice
  # Path to your Spring Boot JAR relative to the repository root
  SPRING_BOOT_JAR_PATH: build/libs/invoice.jar # IMPORTANT: Adjust for Gradle: usually build/libs/your-app-name.jar

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: 'read'
      id-token: 'write' # Required for Workload Identity Federation

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: 'gradle' # Cache Gradle dependencies

      - name: Build Spring Boot application with Gradle
        # Use ./gradlew for wrapper or gradle for direct installation
        run: ./gradlew bootJar -x test # Builds the JAR, skipping tests for faster build

      # Authenticate to Google Cloud using Workload Identity Federation
      # This is the recommended and most secure way.
      # Requires prior setup in GCP (IAM Service Account, Workload Identity Pool, and Provider).
      # See https://github.com/google-github-actions/auth#setting-up-workload-identity-federation
#      - id: 'auth'
#        name: 'Authenticate to Google Cloud'
#        uses: 'google-github-actions/auth@v2'
#        with:
#          # This is the email of the service account that has permissions to deploy to Cloud Run
#          # (e.g., `roles/run.admin`, `roles/artifactregistry.writer`)
#          workload_identity_provider: 'projects/1088640053131/locations/global/workloadIdentityPools/github-actions-pool/providers/github' # IMPORTANT: Replace with your WIF provider
#          service_account: 'github-actions-deployer@hellogrpc-296603.iam.gserviceaccount.com' # IMPORTANT: Replace with your service account email

      # Alternative: Authenticate using a service account key (less secure, but simpler for quick tests)
      # Uncomment the block below and comment out the Workload Identity Federation block above if you prefer this.
      # You would need to store the JSON key as a GitHub Secret named `GCP_SA_KEY`.
      - id: 'auth'
        name: 'Authenticate to Google Cloud'
        uses: 'google-github-actions/auth@v2'
        with:
          credentials_json: '${{ secrets.GCP_SA_KEY }}'

      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.GCP_PROJECT_ID }}

      - name: Configure Docker to use Google Cloud CLI for authentication
        run: gcloud auth configure-docker europe-west1-docker.pkg.dev # IMPORTANT: Adjust region if not europe-west1

      - name: Build and push Docker image to Artifact Registry
        run: |
          # Define the full image path for Artifact Registry
          # Format: REGION-docker.pkg.dev/PROJECT_ID/REPOSITORY_NAME/IMAGE_NAME:TAG
          # Assuming you have an Artifact Registry repository named 'springboot-repo' in your region
          # If not, create one: `gcloud artifacts repositories create springboot-repo --repository-format=docker --location=your-region`
          IMAGE_PATH="${{ env.CLOUD_RUN_REGION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/dockerrepo/${{ env.IMAGE_NAME }}:${{ github.sha }}"

          # Create a Dockerfile on the fly for simplicity, or use an existing one
          # This Dockerfile assumes your Spring Boot JAR is in build/libs/
          cat <<EOF > Dockerfile
          FROM openjdk:17-jdk-slim
          VOLUME /tmp
          ARG JAR_FILE=${{ env.SPRING_BOOT_JAR_PATH }}
          COPY \${JAR_FILE} app.jar
          ENTRYPOINT ["java","-jar","/app.jar"]
          EOF

          # Build the Docker image
          docker build -t "$IMAGE_PATH" .
          # Push the Docker image to Artifact Registry
          docker push "$IMAGE_PATH"

      - name: Deploy to Google Cloud Run
        uses: google-github-actions/deploy-cloudrun@v2
        with:
          service: ${{ env.CLOUD_RUN_SERVICE_NAME }}
          region: ${{ env.CLOUD_RUN_REGION }}
          # Use the same image path as built and pushed above
          image: ${{ env.CLOUD_RUN_REGION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/dockerrepo/${{ env.IMAGE_NAME }}:${{ github.sha }}
          # Optional: allow unauthenticated access to the service
          # If you want to restrict access, remove this line and configure IAM roles on Cloud Run
          flags: --allow-unauthenticated
